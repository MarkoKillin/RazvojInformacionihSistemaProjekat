package com.mudl.backend.controllers;

import java.io.IOException;
import java.security.Principal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.mudl.backend.exceptions.InvalidMethodParameterException;
import com.mudl.backend.services.StudentService;

import jakarta.servlet.http.HttpServletRequest;
import model.Predmet;

/**
 * @author Marko Mirkovic https://github.com/MarkoKillin
 * 
 *         Purpose of this controller is to handle requests for "student" role
 */

@Controller
@RequestMapping("/student/")
public class StudentController {

	@Autowired
	private StudentService ss;
	
	@GetMapping("getAddPredajZadatak")
	public String getAddPredajZadatak(HttpServletRequest req, @RequestParam("idPredmet") int idPredmet) {
		req.setAttribute("listaZadataka", ss.getZadatak(idPredmet));
		return "dodaj_zadatak_resenje";
	}
	
	@PostMapping("addPredajZadatak")
	public String addPredajZadatak(HttpServletRequest req, @RequestParam("file") MultipartFile file, @RequestParam("idZadatak") int idZadatak, 
			@RequestParam("sadrzaj") String sadrzaj, Principal p) {
		try {
			int id = ss.saveDomaci(file, idZadatak, sadrzaj, p.getName());
			if (id == -1)
				req.setAttribute("message", "Došlo je do greške prilikom čuvanja.");
			else
				req.setAttribute("message", "Uspešno čuvanje. Id je: " + id);			
		} catch (InvalidMethodParameterException e) {
			req.setAttribute("message", e.getMessage());
		} catch (IOException e) {
			req.setAttribute("message", "Došlo je do greške prilikom čuvanja fajla.");
		}
		return "prikaz_predmeta";
	}

	@GetMapping("getAddToPredmet")
	public String getAddToPredmet(HttpServletRequest req, Principal p) {
		req.setAttribute("listaPredmeta", ss.getPredmetForJoin(p.getName()));
		return "udji_na_predmet";
	}

	@PostMapping("addToPredmet")
	public String addToPredmet(HttpServletRequest req, @RequestParam("idPredmet") int idPredmet, Principal p) {
		int id = ss.addToPredmet(idPredmet, p.getName());
		if (id == -1)
			req.setAttribute("message", "Došlo je do greške prilikom čuvanja.");
		else
			req.setAttribute("message", "Uspešno čuvanje. Id je: " + id);
		return "home";
	}

	@GetMapping("getMaterijal")
	public String getMaterijal(HttpServletRequest req, @RequestParam("idPredmet") int idPredmet) {
		req.setAttribute("listaMaterijala", ss.getMaterijal(idPredmet));
		return "prikaz_detalja_predmeta";
	}

	@GetMapping("getZadatak")
	public String getZadatak(HttpServletRequest req, @RequestParam("idPredmet") int idPredmet) {
		req.setAttribute("listaZadataka", ss.getZadatak(idPredmet));
		return "prikaz_detalja_predmeta";
	}

	@GetMapping("getPredmetForStudent")
	public String getPredmetForStudent(HttpServletRequest req, Principal p) {
		List<Predmet> lp = ss.getPredmetForStudent(ss.getStudent(p.getName()));
		req.setAttribute("listPredmet", lp);
		return "home";
	}

	@GetMapping("prikazPredmeta")
	public String prikazPredmeta(HttpServletRequest req, Principal p, @RequestParam("idPredmet") int idPredmet) {
		req.getSession().setAttribute("predmet", ss.findPredmetById(idPredmet));
		return "prikaz_predmeta";
	}

	@GetMapping("getUpdateProfile")
	public String getUpdateProfile(HttpServletRequest req, Principal p) {
		req.setAttribute("profil", ss.getKorisnikByUsername(p.getName()));
		return "uredi_profil";
	}

	@PostMapping("updateProfile")
	public String updateProfile(HttpServletRequest req, @RequestParam("ime") String ime,
			@RequestParam("prezime") String prezime, @RequestParam("email") String email,
			@RequestParam("username") String username, @RequestParam("password") String password,
			@RequestParam("npassword") String npassword, Principal p) {
		int id = -1;
		try {
			id = ss.updateProfile(ime, prezime, email, username, password, npassword, p);
			if (id == -1)
				req.setAttribute("message", "Došlo je do greške prilikom čuvanja.");
			else
				req.setAttribute("message", "Uspešno čuvanje. Id korisnika je: " + id);
		} catch (InvalidMethodParameterException e) {
			req.setAttribute("message", e.getMessage());
		}
		return "home";
	}
	
	@GetMapping("getAddIzbor")
	public String getAddIzbor(HttpServletRequest req, @RequestParam("idPredmet") int idPredmet) {
		req.setAttribute("listaAnketa", ss.getAnketeSaPredmeta(idPredmet));
		return "odaberi_izbor";
	}
	
	@GetMapping("getAddIzbor2")
	public String getAddIzbor2(HttpServletRequest req, @RequestParam("idAnketa") int idAnketa) {
		req.setAttribute("anketa", ss.getAnketaById(idAnketa));
		req.setAttribute("listaIzbora", ss.getIzboriSaAnkete(idAnketa));
		return "odaberi_izbor";
	}
	
	@PostMapping("addIzborNaAnketi")
	public String addIzbor(HttpServletRequest req, @RequestParam("idIzbor") int idIzbor, Principal p) {
		int id = ss.addIzbor(idIzbor, p.getName());
		if (id == -1)
			req.setAttribute("message", "Došlo je do greške prilikom čuvanja.");
		else
			req.setAttribute("message", "Uspešno čuvanje. Id je: " + id);
		return "prikaz_predmeta";
	}

	@GetMapping("home")
	public String getHomePage() {
		return "home";
	}

	@GetMapping("o_nama")
	public String getNas() {
		return "o_nama";
	}
}
